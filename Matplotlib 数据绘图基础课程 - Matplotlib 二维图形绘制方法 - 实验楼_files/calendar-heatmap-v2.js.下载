function calendarHeatmap() {
  // defaults
  var width = 750
  var height = 130
  var legendWidth = 150
  var selector = 'body'
  var SQUARE_LENGTH = 12
  var SQUARE_PADDING = 2
  var MONTH_LABEL_PADDING = 6
  var now = moment()
    .endOf('day')
    .toDate()
  var yearAgo = moment()
    .startOf('day')
    .subtract(1, 'year')
    .toDate()
  var startDate = null
  var data = []
  var max = null
  var colorRange = ['#D8E6E7', '#218380']
  var tooltipEnabled = true
  var tooltipUnit = 'contribution'
  var legendEnabled = true
  var onClick = null
  var weekStart = 0 //0 for Sunday, 1 for Monday
  var locale = {
    months: [
      'Jan',
      'Feb',
      'Mar',
      'Apr',
      'May',
      'Jun',
      'Jul',
      'Aug',
      'Sep',
      'Oct',
      'Nov',
      'Dec',
    ],
    days: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
    No: 'No',
    on: 'on',
    Less: 'Less',
    More: 'More',
  }
  var legendTooltips = [
    '<span><strong>有效学习时间为0</strong></span>',
    '<span><strong>0min≤有效学习时间<30min</strong></span>',
    '<span><strong>30min≤有效学习时间<60min</strong></span>',
    '<span><strong>60min≤有效学习时间<120min</strong></span>',
    '<span><strong>有效学习时间为≥120min</strong></span>',
  ]

  // setters and getters
  chart.data = function(value) {
    if (!arguments.length) {
      return data
    }
    data = value
    return chart
  }

  chart.max = function(value) {
    if (!arguments.length) {
      return max
    }
    max = value
    return chart
  }

  chart.selector = function(value) {
    if (!arguments.length) {
      return selector
    }
    selector = value
    return chart
  }

  chart.startDate = function(value) {
    if (!arguments.length) {
      return startDate
    }
    yearAgo = value
    now = moment(value)
      .endOf('day')
      .add(1, 'year')
      .toDate()
    return chart
  }

  chart.colorRange = function(value) {
    if (!arguments.length) {
      return colorRange
    }
    colorRange = value
    return chart
  }

  chart.tooltipEnabled = function(value) {
    if (!arguments.length) {
      return tooltipEnabled
    }
    tooltipEnabled = value
    return chart
  }

  chart.tooltipUnit = function(value) {
    if (!arguments.length) {
      return tooltipUnit
    }
    tooltipUnit = value
    return chart
  }

  chart.legendEnabled = function(value) {
    if (!arguments.length) {
      return legendEnabled
    }
    legendEnabled = value
    return chart
  }

  chart.onClick = function(value) {
    if (!arguments.length) {
      return onClick()
    }
    onClick = value
    return chart
  }

  chart.locale = function(value) {
    if (!arguments.length) {
      return locale
    }
    locale = value
    return chart
  }

  function chart() {
    d3.select(chart.selector())
      .selectAll('svg.calendar-heatmap')
      .remove() // remove the existing chart, if it exists

    var dateRange = d3.time.days(yearAgo, now) // generates an array of date objects within the specified range
    var firstDate = moment(dateRange[0])
    if (max === null) {
      max = d3.max(chart.data(), function(d) {
        return d.count
      })
    } // max data value

    // color range
    var color = d3.scale
      .linear()
      .range(chart.colorRange())
      .domain([0, max])
    var tooltip
    var dayRects

    drawChart()

    function drawChart() {
      var svg = d3
        .select(chart.selector())
        .style('position', 'relative')
        .append('svg')
        .attr('width', width)
        .attr('class', 'calendar-heatmap')
        .attr('height', height)
        .style('padding', '0px')

      dayRects = svg.selectAll('.day-cell').data(dateRange) //  array of days for the last yr

      dayRects
        .enter()
        .append('rect')
        .attr('class', 'day-cell')
        .attr('width', SQUARE_LENGTH)
        .attr('height', SQUARE_LENGTH)
        .attr('fill', function(d) {
          let colorNum
          let count = countOfDay(d)
          if (count === 0) {
            colorNum = 0
          } else if (count <= 29) {
            colorNum = 30
          } else if (count <= 59) {
            colorNum = 40
          } else if (count <= 119) {
            colorNum = 60
          } else {
            colorNum = 120
          }
          return color(colorNum)
        })
        .attr('x', function(d, i) {
          var cellDate = moment(d)
          var result =
            cellDate.week() -
            firstDate.week() +
            firstDate.weeksInYear() *
              (cellDate.weekYear() - firstDate.weekYear())
          return result * (SQUARE_LENGTH + SQUARE_PADDING)
        })
        .attr('y', function(d, i) {
          return (
            MONTH_LABEL_PADDING +
            formatWeekday(d.getDay()) * (SQUARE_LENGTH + SQUARE_PADDING)
          )
        })
      if (typeof onClick === 'function') {
        dayRects.on('click', function(d) {
          var count = countOfDay(d)
          onClick({
            date: d,
            count: count,
          })
        })
      }
      if (chart.tooltipEnabled()) {
        dayRects
          .on('mouseenter', function(d, i) {
            tooltip = d3
              .select(chart.selector())
              .append('div')
              .attr('class', 'day-cell-tooltip')
              .html(tooltipHTMLForDate(d))
              .style('left', function() {
                return +dayRects[0][i].getAttribute('x') - 30 + 'px'
              })
              .style('top', function() {
                return +dayRects[0][i].getAttribute('y') + 10 + 'px'
              })
          })
          .on('mouseleave', function(d, i) {
            tooltip.remove()
          })
      }

      if (chart.legendEnabled()) {
        var colorRange = [color(0)]
        for (var i = 4; i > 0; i--) {
          colorRange.push(color(max / i))
        }
        var legendGroup = svg.append('g')
        legendGroup
          .selectAll('.calendar-heatmap-legend')
          .data(colorRange)
          .enter()
          .append('rect')
          .attr('class', 'calendar-heatmap-legend')
          .attr('width', SQUARE_LENGTH)
          .attr('height', SQUARE_LENGTH)
          .attr('x', function(d, i) {
            return width - legendWidth + (i + 1) * 13
          })
          .attr('y', height - SQUARE_PADDING * 6)
          .attr('fill', function(d) {
            return d
          })
          .on('mouseover', function(d, i) {
            legendTooltip = d3
              .select(chart.selector())
              .append('div')
              .attr('class', 'day-legend-tooltip')
              .html(legendTooltips[i])
              .style('left', function(d, i) {
                return width - legendWidth + (i + 1) * 13 + 'px'
              })
              .style('top', function() {
                return height - SQUARE_PADDING * 8 + 15 + 'px'
              })
          })
          .on('mouseout', function(d, i) {
            legendTooltip.remove()
          })

        legendGroup
          .append('text')
          .attr(
            'class',
            'calendar-heatmap-legend-text calendar-heatmap-legend-text-less'
          )
          .attr('x', width - legendWidth - 13)
          .attr('y', height - SQUARE_PADDING)
          .text(locale.Less)

        legendGroup
          .append('text')
          .attr(
            'class',
            'calendar-heatmap-legend-text calendar-heatmap-legend-text-more'
          )
          .attr(
            'x',
            width - legendWidth + SQUARE_PADDING + (colorRange.length + 1) * 13
          )
          .attr('y', height - SQUARE_PADDING)
          .text(locale.More)
      }

      dayRects.exit().remove()

      locale.days.forEach(function(day, index) {
        index = formatWeekday(index)
        if (index % 2) {
          svg
            .append('text')
            .attr('class', 'day-initial')
            .attr(
              'transform',
              'translate(-16,' +
                (SQUARE_LENGTH + SQUARE_PADDING) * (index + 1) +
                ')'
            )
            .style('text-anchor', 'middle')
            .attr('dy', '2')
            .text(day)
        }
      })
    }

    function pluralizedTooltipUnit(count) {
      if ('string' === typeof tooltipUnit) {
        return tooltipUnit
      }
      for (var i in tooltipUnit) {
        var _rule = tooltipUnit[i]
        var _min = _rule.min
        var _max = _rule.max || _rule.min
        _max = _max === 'Infinity' ? Infinity : _max
        if (count >= _min && count <= _max) {
          return _rule.unit
        }
      }
    }

    function tooltipHTMLForDate(d) {
      var dateStr = moment(d).format('YYYY-MM-DD')
      var count = countOfDay(d)
      return (
        '<span><strong>' +
        (count ? count : 0) +
        ' ' +
        pluralizedTooltipUnit(count) +
        '</strong> ' +
        locale.on +
        ' ' +
        dateStr +
        '</span>'
      )
    }

    function countOfDay(d) {
      var count = 0
      var match = chart
        .data()
        .find(element => moment(element.date).isSame(d, 'day'))
      if (match) {
        count = match.count
      }
      return count
    }

    function formatWeekday(weekDay) {
      if (weekStart === 1) {
        if (weekDay === 0) {
          return 6
        } else {
          return weekDay - 1
        }
      }
      return weekDay
    }
  }

  return chart
}

// polyfill for Array.find() method
/* jshint ignore:start */
if (!Array.prototype.find) {
  Array.prototype.find = function(predicate) {
    if (this === null) {
      throw new TypeError('Array.prototype.find called on null or undefined')
    }
    if (typeof predicate !== 'function') {
      throw new TypeError('predicate must be a function')
    }
    var list = Object(this)
    var length = list.length >>> 0
    var thisArg = arguments[1]
    var value

    for (var i = 0; i < length; i++) {
      value = list[i]
      if (predicate.call(thisArg, value, i, list)) {
        return value
      }
    }
    return undefined
  }
}
/* jshint ignore:end */
